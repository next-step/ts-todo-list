{"version":3,"sources":["src/index.ts"],"names":[],"mappings":";AAiJA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA/IA,IAAM,EAAiB,SAAS,cAAc,MAC1C,EAAyB,GAE7B,SAAS,IACP,EAAe,UAAY,GACrB,IAAA,EAAiB,EAAS,IAAI,SAAC,GAAS,OAAA,EAAa,KAE3D,EAAe,mBAAmB,YAAa,EAAe,KAAK,KAGrE,SAAS,EAAyD,GAA1C,IAAA,EAAA,EAAA,GAAI,EAAA,EAAA,QAAS,EAAA,EAAA,SAAU,EAAA,EAAA,KAAM,EAAA,EAAA,YAClC,MAAA,UAAA,OAAA,EAAY,WAAA,OAAA,EAA8B,6BAAA,OAAA,EAAmC,6BAAA,OAAA,EAAoC,6BAAA,OAAA,EAAgC,6BAAA,OAAA,EAAlK,gBAGF,SAAS,EAAQ,GACf,EAAS,KAAK,GAkBhB,SAAS,EACP,EACA,EACA,EACA,EACA,GAEM,IAAA,EAAa,EAAS,KAAK,SAAC,GAAS,OAAA,EAAK,KAAO,IACjD,EAAkB,EAAS,UAAU,SAAC,GAAS,OAAA,EAAK,KAAO,IAE7D,GAAC,IAAmC,IAArB,EAAf,CAKE,IAAA,EAAW,CAAE,GAAA,EAAI,QAAA,EAAS,SAAA,EAAU,YAAA,EAAa,KAAA,GACjD,EAAmB,GAEpB,IAAA,IAAM,KAAS,EACd,EAAS,KACX,EAAiB,GAAS,EAAS,IAIjC,IAAA,EAAa,OAAA,OAAA,OAAA,OAAA,GAAQ,GAAe,GAC1C,EAAS,GAAmB,OAd1B,MAAM,sBAiBV,SAAS,EAAW,GAIb,IAHC,IAAA,EAAkB,EAAS,UAAU,SAAC,GAAS,OAAA,EAAK,KAAO,IAC3D,EAAO,GAEJ,EAAI,EAAS,OAAS,EAAG,GAAK,EAAG,IAIpC,GAHA,EAAI,GACN,EAAK,KAAK,EAAS,OAEjB,IAAM,EAAiB,CACzB,EAAS,MACT,MAIG,KAAA,EAAK,QACV,EAAS,KAAK,EAAK,OAIvB,SAAS,EAAiB,GASxB,EAAQ,CACN,GATS,EAAE,OAAF,GAAe,MAUxB,QATc,EAAE,OAAF,QAAoB,MAUlC,SATe,EAAE,OAAF,SAAqB,MAUpC,KATW,EAAE,OAAF,KAAiB,MAC3B,MAAM,KACN,IAAI,SAAC,GAAQ,OAAA,EAAI,SACjB,OAAO,SAAC,GAAQ,OAAA,EAAI,OAAS,IAO9B,aAAa,IAGf,IAGF,SAAS,IACP,EAAW,GACX,IAGF,SAAS,EAAe,GAChB,IAAA,EAAK,EAAE,OAAF,GAAe,MACpB,EAAU,EAAE,OAAF,QAAoB,MAC9B,EAAW,EAAE,OAAF,SAAqB,MAEhC,EAAO,EAAE,OAAF,KAAiB,MAC3B,MAAM,KACN,IAAI,SAAC,GAAQ,OAAA,EAAI,SACjB,OAAO,SAAC,GAAQ,OAAA,EAAI,OAAS,IAEhC,EACE,EACA,GAAoB,GACpB,GAAsB,IATJ,EAWlB,GAAc,IAGhB,IAGF,SAAS,IACD,IAAA,EAAQ,SAAS,cAAc,QAC/B,EAAuB,SAAS,eAAe,iBAErD,EAAM,iBAAiB,SAAU,SAAC,GAChC,EAAE,iBAE4B,WAA1B,EAAE,UAAU,UACd,EAAe,GAEf,EAAiB,KAIrB,EAAqB,iBAAiB,QAAS,GAGjD,OAAO,OAAS,WACd,IACA","file":"src.337d88c4.js","sourceRoot":"..","sourcesContent":["import { SingleTodo } from \"./@types\";\n\nconst $resultSection = document.querySelector(\"ul\");\nlet todoList: SingleTodo[] = [];\n\nfunction renderTodo(): void {\n  $resultSection.innerHTML = \"\";\n  const resultTemplate = todoList.map((todo) => makeTemplate(todo));\n\n  $resultSection.insertAdjacentHTML(\"beforeend\", resultTemplate.join(\"\"));\n}\n\nfunction makeTemplate({ id, content, category, tags, isCompleted }): string {\n  return `<li id=${id}><span>${id}</span>&nbsp;&nbsp;<span>${content}</span>&nbsp;&nbsp;<span>${category}</span>&nbsp;&nbsp;<span>${tags}</span>&nbsp;&nbsp;<span>${isCompleted}</span></li>`;\n}\n\nfunction addTodo(newTodo: SingleTodo): void {\n  todoList.push(newTodo);\n}\n\n// function readTodo(id?: number): SingleTodo | TodoList {\n//   if (id) {\n//     const targetTodo = todoList.find((todo) => todo.id === id);\n\n//     if (!targetTodo) {\n//       alert(\"선택한 할 일을 찾을 수 없습니다.\");\n//       return todoList;\n//     }\n\n//     return targetTodo;\n//   }\n\n//   return todoList;\n// }\n\nfunction editTodo(\n  id: number,\n  content?: string,\n  category?: string,\n  isCompleted?: boolean,\n  tags?: string[]\n): void {\n  const targetTodo = todoList.find((todo) => todo.id === id);\n  const targetTodoIndex = todoList.findIndex((todo) => todo.id === id);\n\n  if (!targetTodo || targetTodoIndex === -1) {\n    alert(\"수정할 대상을 찾을 수 없습니다.\");\n    return;\n  }\n\n  const paramObj = { id, content, category, isCompleted, tags };\n  const willUpdateFields = {};\n\n  for (const param in paramObj) {\n    if (paramObj[param]) {\n      willUpdateFields[param] = paramObj[param];\n    }\n  }\n\n  const todoAfterEdit = { ...targetTodo, ...willUpdateFields };\n  todoList[targetTodoIndex] = todoAfterEdit; // todoList 배열 업데이트\n}\n\nfunction deleteTodo(id: number): void {\n  const targetTodoIndex = todoList.findIndex((todo) => todo.id === id);\n  const temp = [];\n\n  for (let i = todoList.length - 1; i >= 0; i--) {\n    if (i > targetTodoIndex) {\n      temp.push(todoList.pop());\n    }\n    if (i === targetTodoIndex) {\n      todoList.pop();\n      break;\n    }\n  }\n\n  while (temp.length) {\n    todoList.push(temp.pop());\n  }\n}\n\nfunction handleCreateTodo(e): void {\n  const id = e.target[\"id\"].value;\n  const content = e.target[\"content\"].value;\n  const category = e.target[\"category\"].value;\n  const tags = e.target[\"tags\"].value\n    .split(\",\")\n    .map((tag) => tag.trim())\n    .filter((tag) => tag.length > 0);\n\n  addTodo({\n    id,\n    content,\n    category,\n    tags,\n    isCompleted: false,\n  });\n\n  renderTodo();\n}\n\nfunction handleRemoveAllTodos(): void {\n  todoList = [];\n  renderTodo();\n}\n\nfunction handleEditTodo(e): void {\n  const id = e.target[\"id\"].value;\n  const content = e.target[\"content\"].value;\n  const category = e.target[\"category\"].value;\n  const isCompleted = false;\n  const tags = e.target[\"tags\"].value\n    .split(\",\")\n    .map((tag) => tag.trim())\n    .filter((tag) => tag.length > 0);\n\n  editTodo(\n    id,\n    content ? content : \"\",\n    category ? category : \"\",\n    isCompleted,\n    tags ? tags : []\n  );\n\n  renderTodo();\n}\n\nfunction app(): void {\n  const $form = document.querySelector(\"form\");\n  const $removeAllTodoButton = document.getElementById(\"remove-button\");\n\n  $form.addEventListener(\"submit\", (e) => {\n    e.preventDefault();\n\n    if (e.submitter.innerText === \"할 일 수정\") {\n      handleEditTodo(e);\n    } else {\n      handleCreateTodo(e);\n    }\n  });\n\n  $removeAllTodoButton.addEventListener(\"click\", handleRemoveAllTodos);\n}\n\nwindow.onload = () => {\n  app();\n  renderTodo();\n};\n"]}